-- ======================================================
-- BASE DE DATOS: bioalga  (POS Tecnología / IoT)
-- VERSION: 2.2
-- FECHA: 2025-08-20
-- NOTA: Ajuste en CLIENTES: apellido_paterno y apellido_materno.
-- ======================================================

DROP DATABASE IF EXISTS bioalga;
CREATE DATABASE bioalga CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
USE bioalga;

-- Usuario de BD
CREATE USER IF NOT EXISTS 'bioalga_user'@'localhost' IDENTIFIED BY 'TuPassFuerte!123';
GRANT ALL PRIVILEGES ON bioalga.* TO 'bioalga_user'@'localhost';
FLUSH PRIVILEGES;

SET FOREIGN_KEY_CHECKS = 0;

-- ==========================
-- 1) ROLES
-- ==========================
CREATE TABLE roles (
  id_rol INT AUTO_INCREMENT PRIMARY KEY,
  nombre VARCHAR(40) NOT NULL UNIQUE,
  descripcion VARCHAR(200)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ==========================
-- 2) EMPLEADOS
-- ==========================
CREATE TABLE empleados (
  id_empleado INT AUTO_INCREMENT PRIMARY KEY,
  nombre VARCHAR(100) NOT NULL,
  apellido_paterno VARCHAR(100),
  apellido_materno VARCHAR(100),
  curp VARCHAR(18),
  rfc VARCHAR(13),
  correo VARCHAR(120) UNIQUE,
  telefono VARCHAR(20),
  puesto VARCHAR(80),
  salario DECIMAL(10,2) DEFAULT 0,
  fecha_ingreso DATE,
  fecha_baja DATE,
  estatus ENUM('Activo','Inactivo','Baja') DEFAULT 'Activo',
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  INDEX idx_emp_nombre (nombre, apellido_paterno, apellido_materno)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ==========================
-- 3) USUARIOS
-- ==========================
CREATE TABLE usuarios (
  id_usuario INT AUTO_INCREMENT PRIMARY KEY,
  nombre_usuario VARCHAR(50) NOT NULL UNIQUE,
  contrasena VARCHAR(255) NOT NULL,
  id_rol INT NOT NULL,
  id_empleado INT NULL,
  ultimo_login DATETIME NULL,
  activo TINYINT(1) DEFAULT 1,
  fecha_registro DATETIME DEFAULT CURRENT_TIMESTAMP,
  INDEX idx_usuarios_id_rol (id_rol),
  INDEX idx_usuarios_id_empleado (id_empleado),
  CONSTRAINT fk_usuarios_roles FOREIGN KEY (id_rol) REFERENCES roles(id_rol),
  CONSTRAINT fk_usuarios_empleados FOREIGN KEY (id_empleado) REFERENCES empleados(id_empleado)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ==========================
-- 4) PROVEEDORES
-- ==========================
CREATE TABLE proveedores (
  id_proveedor INT AUTO_INCREMENT PRIMARY KEY,
  nombre_empresa VARCHAR(120) NOT NULL,
  contacto VARCHAR(100),
  correo VARCHAR(120),
  telefono VARCHAR(20),
  direccion TEXT,
  rfc VARCHAR(13),
  pais VARCHAR(50),
  ciudad VARCHAR(50),
  codigo_postal VARCHAR(10),
  estatus ENUM('Activo','Inactivo') DEFAULT 'Activo',
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ==========================
-- 5) CATEGORÍAS / MARCAS / UNIDADES
-- ==========================
CREATE TABLE categorias (
  id_categoria INT AUTO_INCREMENT PRIMARY KEY,
  nombre VARCHAR(100) NOT NULL,
  descripcion TEXT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE marcas (
  id_marca INT AUTO_INCREMENT PRIMARY KEY,
  nombre VARCHAR(100) NOT NULL,
  descripcion TEXT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE unidades (
  id_unidad INT AUTO_INCREMENT PRIMARY KEY,
  nombre VARCHAR(50) NOT NULL,
  simbolo VARCHAR(10)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ==========================
-- 6) PRODUCTOS
-- ==========================
CREATE TABLE productos (
  id_producto INT AUTO_INCREMENT PRIMARY KEY,
  nombre VARCHAR(150) NOT NULL,
  descripcion TEXT,
  tipo ENUM('Componente','Sensor','Actuador','Módulo','Accesorio','Cable','Alimentación','Herramienta','Microcontrolador','Biorreactor','Alga','Otro') NOT NULL DEFAULT 'Componente',
  id_categoria INT,
  id_marca INT,
  id_unidad INT,
  proveedor_preferente_id INT NULL,
  codigo_sku VARCHAR(40) NOT NULL UNIQUE,
  codigo_barras VARCHAR(50) UNIQUE,
  estatus ENUM('Activo','Inactivo') DEFAULT 'Activo',
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  CONSTRAINT fk_prod_cat   FOREIGN KEY (id_categoria) REFERENCES categorias(id_categoria),
  CONSTRAINT fk_prod_marca FOREIGN KEY (id_marca)     REFERENCES marcas(id_marca),
  CONSTRAINT fk_prod_uni   FOREIGN KEY (id_unidad)    REFERENCES unidades(id_unidad),
  CONSTRAINT fk_prod_prov  FOREIGN KEY (proveedor_preferente_id) REFERENCES proveedores(id_proveedor)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE producto_specs (
  id_spec INT AUTO_INCREMENT PRIMARY KEY,
  id_producto INT NOT NULL,
  clave VARCHAR(80) NOT NULL,
  valor VARCHAR(255) NOT NULL,
  CONSTRAINT fk_specs_prod FOREIGN KEY (id_producto) REFERENCES productos(id_producto) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ==========================
-- 7) PRECIOS (histórico)
-- ==========================
CREATE TABLE producto_precios (
  id_precio INT AUTO_INCREMENT PRIMARY KEY,
  id_producto INT NOT NULL,
  tipo_precio ENUM('Normal','Mayoreo','Descuento','Especial') NOT NULL,
  precio DECIMAL(10,2) NOT NULL,
  vigente_desde DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  vigente_hasta DATETIME NULL,
  activo TINYINT(1) NOT NULL DEFAULT 1,
  CONSTRAINT fk_precio_prod FOREIGN KEY (id_producto) REFERENCES productos(id_producto) ON DELETE CASCADE,
  INDEX idx_precio_vigencia (id_producto, tipo_precio, activo, vigente_desde)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

DROP VIEW IF EXISTS vw_producto_precio_vigente;
CREATE VIEW vw_producto_precio_vigente AS
SELECT p.id_producto, pp.tipo_precio, pp.precio
FROM productos p
JOIN producto_precios pp
  ON pp.id_producto = p.id_producto
WHERE
  pp.activo = 1
  AND (pp.vigente_hasta IS NULL OR pp.vigente_hasta >= NOW())
  AND pp.vigente_desde = (
      SELECT MAX(pp2.vigente_desde)
      FROM producto_precios pp2
      WHERE pp2.id_producto = pp.id_producto
        AND pp2.tipo_precio = pp.tipo_precio
        AND pp2.activo = 1
        AND (pp2.vigente_hasta IS NULL OR pp2.vigente_hasta >= NOW())
  );

-- ==========================
-- 8) CLIENTES (con apellidos paterno/materno)
-- ==========================
CREATE TABLE clientes (
  id_cliente INT AUTO_INCREMENT PRIMARY KEY,
  nombre VARCHAR(100) NOT NULL,
  apellido_paterno VARCHAR(100),
  apellido_materno VARCHAR(100),
  correo VARCHAR(100) UNIQUE,
  telefono VARCHAR(20),
  direccion TEXT,
  tipo_cliente ENUM('Normal','Mayoreo','Especial','Descuento') DEFAULT 'Normal',
  estado ENUM('Activo','Inactivo') DEFAULT 'Activo',
  fecha_registro DATETIME DEFAULT CURRENT_TIMESTAMP,
  INDEX idx_clientes_nombre (nombre, apellido_paterno, apellido_materno)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ==========================
-- 9) COMPRAS
-- ==========================
CREATE TABLE compras (
  id_compra INT AUTO_INCREMENT PRIMARY KEY,
  proveedor_id INT NULL,
  proveedor_texto VARCHAR(200) NULL,
  fecha_compra DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  subtotal DECIMAL(12,2) NOT NULL DEFAULT 0,
  impuestos DECIMAL(12,2) NOT NULL DEFAULT 0,
  total DECIMAL(12,2)  NOT NULL DEFAULT 0,
  id_usuario INT NOT NULL,
  notas TEXT,
  CONSTRAINT fk_compra_prov FOREIGN KEY (proveedor_id) REFERENCES proveedores(id_proveedor),
  CONSTRAINT fk_compra_user FOREIGN KEY (id_usuario) REFERENCES usuarios(id_usuario)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE detalle_compra (
  id_detalle INT AUTO_INCREMENT PRIMARY KEY,
  id_compra INT NOT NULL,
  id_producto INT NOT NULL,
  cantidad INT NOT NULL,
  costo_unitario DECIMAL(10,2) NOT NULL,
  iva_unitario DECIMAL(10,2) DEFAULT 0,
  CONSTRAINT fk_dcompra_compra FOREIGN KEY (id_compra) REFERENCES compras(id_compra) ON DELETE CASCADE,
  CONSTRAINT fk_dcompra_prod FOREIGN KEY (id_producto) REFERENCES productos(id_producto)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ==========================
-- 10) INVENTARIO (movimientos)
-- ==========================
CREATE TABLE inventario_movimientos (
  id_movimiento INT AUTO_INCREMENT PRIMARY KEY,
  id_producto INT NOT NULL,
  tipo_movimiento ENUM('Entrada','Salida','Ajuste') NOT NULL,
  cantidad INT NOT NULL,
  fecha DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  origen_tipo ENUM('Compra','Venta','Pedido','Ajuste','Devolucion') NOT NULL,
  origen_id INT NULL,
  id_usuario INT NOT NULL,
  referencia VARCHAR(255),
  CONSTRAINT fk_mov_prod  FOREIGN KEY (id_producto) REFERENCES productos(id_producto),
  CONSTRAINT fk_mov_user  FOREIGN KEY (id_usuario)  REFERENCES usuarios(id_usuario),
  INDEX idx_mov_origen (origen_tipo, origen_id),
  INDEX idx_mov_prod_fecha (id_producto, fecha)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ==========================
-- 11) VENTAS (POS)
-- ==========================
CREATE TABLE ventas (
  id_venta INT AUTO_INCREMENT PRIMARY KEY,
  cliente_id INT NULL,
  fecha_venta DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  subtotal DECIMAL(12,2) NOT NULL DEFAULT 0,
  impuestos DECIMAL(12,2) NOT NULL DEFAULT 0,
  total DECIMAL(12,2) NOT NULL DEFAULT 0,
  efectivo_recibido DECIMAL(12,2) DEFAULT 0,
  cambio DECIMAL(12,2) DEFAULT 0,
  metodo_pago ENUM('Efectivo','Tarjeta','Transferencia','Mixto') NOT NULL DEFAULT 'Efectivo',
  id_usuario INT NOT NULL,
  estatus ENUM('Pagada','Cancelada') DEFAULT 'Pagada',
  CONSTRAINT fk_venta_cliente FOREIGN KEY (cliente_id) REFERENCES clientes(id_cliente),
  CONSTRAINT fk_venta_usuario FOREIGN KEY (id_usuario) REFERENCES usuarios(id_usuario),
  INDEX idx_venta_fecha (fecha_venta)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE detalle_venta (
  id_detalle INT AUTO_INCREMENT PRIMARY KEY,
  id_venta INT NOT NULL,
  id_producto INT NOT NULL,
  cantidad INT NOT NULL,
  precio_unitario DECIMAL(10,2) NOT NULL,
  descuento_unitario DECIMAL(10,2) DEFAULT 0,
  iva_unitario DECIMAL(10,2) DEFAULT 0,
  CONSTRAINT fk_dventa_venta FOREIGN KEY (id_venta) REFERENCES ventas(id_venta) ON DELETE CASCADE,
  CONSTRAINT fk_dventa_prod  FOREIGN KEY (id_producto) REFERENCES productos(id_producto)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ==========================
-- 12) PEDIDOS (grandes cantidades)
-- ==========================
CREATE TABLE pedidos (
  id_pedido INT AUTO_INCREMENT PRIMARY KEY,
  cliente_id INT NOT NULL,
  fecha_pedido DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  fecha_requerida DATE NULL,
  anticipo DECIMAL(12,2) DEFAULT 0,
  subtotal DECIMAL(12,2) NOT NULL DEFAULT 0,
  impuestos DECIMAL(12,2) NOT NULL DEFAULT 0,
  total DECIMAL(12,2) NOT NULL DEFAULT 0,
  estatus ENUM('Borrador','Confirmado','Preparación','Listo','Facturado','Entregado','Cancelado') DEFAULT 'Borrador',
  id_usuario INT NOT NULL,
  notas TEXT,
  CONSTRAINT fk_pedido_cliente FOREIGN KEY (cliente_id) REFERENCES clientes(id_cliente),
  CONSTRAINT fk_pedido_usuario FOREIGN KEY (id_usuario) REFERENCES usuarios(id_usuario),
  INDEX idx_pedido_estatus (estatus)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE detalle_pedido (
  id_detalle INT AUTO_INCREMENT PRIMARY KEY,
  id_pedido INT NOT NULL,
  id_producto INT NOT NULL,
  cantidad INT NOT NULL,
  precio_unitario DECIMAL(10,2) NOT NULL,
  CONSTRAINT fk_dpedido_pedido FOREIGN KEY (id_pedido) REFERENCES pedidos(id_pedido) ON DELETE CASCADE,
  CONSTRAINT fk_dpedido_prod   FOREIGN KEY (id_producto) REFERENCES productos(id_producto)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;


-- ==========================
-- DEVOLUCIONES (cabecera + detalle)
-- ==========================

CREATE TABLE IF NOT EXISTS devoluciones (
  id_devolucion INT AUTO_INCREMENT PRIMARY KEY,
  fecha_devolucion DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  id_usuario INT NOT NULL,               -- quién registró la devolución
  usuario_nombre VARCHAR(120) NOT NULL,  -- snapshot del nombre para reporting
  motivo VARCHAR(300) NOT NULL,          -- requerido
  regresa_inventario TINYINT(1) NOT NULL DEFAULT 1,  -- 1=Sí, 0=No
  total_devuelto DECIMAL(12,2) NOT NULL DEFAULT 0,   -- total que se resta a "ventas del día"
  referencia_venta VARCHAR(50) NULL,     -- opcional: número de ticket si se tiene
  notas TEXT NULL,
  CONSTRAINT fk_devol_usuario FOREIGN KEY (id_usuario) REFERENCES usuarios(id_usuario),
  INDEX idx_devol_fecha (fecha_devolucion),
  INDEX idx_devol_usuario (id_usuario)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE IF NOT EXISTS detalle_devolucion (
  id_detalle INT AUTO_INCREMENT PRIMARY KEY,
  id_devolucion INT NOT NULL,
  id_producto INT NOT NULL,
  producto_nombre VARCHAR(150) NOT NULL,     -- snapshot del nombre para reportes
  cantidad INT NOT NULL,
  -- Para tu caso "precio anotado a mano": guardamos el total de la línea.
  -- Si después quieres unitario, lo añadimos; por ahora, solo total exacto.
  importe_linea_total DECIMAL(12,2) NOT NULL, 
  CONSTRAINT fk_dd_dev FOREIGN KEY (id_devolucion) REFERENCES devoluciones(id_devolucion) ON DELETE CASCADE,
  CONSTRAINT fk_dd_prod FOREIGN KEY (id_producto) REFERENCES productos(id_producto),
  INDEX idx_dd_devolucion (id_devolucion),
  INDEX idx_dd_producto (id_producto)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ==========================
-- VISTAS para reporteo
-- ==========================

-- 1) Devoluciones por día (para consultas rápidas)
DROP VIEW IF EXISTS vw_devoluciones_por_dia;
CREATE VIEW vw_devoluciones_por_dia AS
SELECT DATE(d.fecha_devolucion) AS dia, SUM(d.total_devuelto) AS total_devoluciones
FROM devoluciones d
GROUP BY DATE(d.fecha_devolucion);

-- 2) Ventas netas por día = Ventas - Devoluciones
-- (No tocamos tu vw_ventas_por_dia existente; agregamos una nueva vista)
DROP VIEW IF EXISTS vw_ventas_netas_por_dia;
CREATE VIEW vw_ventas_netas_por_dia AS
SELECT
  v.dia,
  v.total AS total_ventas_brutas,
  COALESCE(d.total_devoluciones, 0) AS total_devoluciones,
  v.total - COALESCE(d.total_devoluciones, 0) AS total_ventas_netas
FROM vw_ventas_por_dia v
LEFT JOIN vw_devoluciones_por_dia d
  ON d.dia = v.dia;

--   --------------------------------------------------------------------------------------
-- ==========================
-- 13) VISTAS PARA DASHBOARD
-- ==========================
DROP VIEW IF EXISTS vw_ventas_por_dia;
CREATE VIEW vw_ventas_por_dia AS
SELECT DATE(fecha_venta) AS dia, SUM(total) AS total
FROM ventas
WHERE estatus='Pagada'
GROUP BY DATE(fecha_venta);

DROP VIEW IF EXISTS vw_top_productos;
CREATE VIEW vw_top_productos AS
SELECT dv.id_producto, p.nombre, SUM(dv.cantidad) AS total_unidades
FROM detalle_venta dv
JOIN productos p ON p.id_producto = dv.id_producto
JOIN ventas v  ON v.id_venta = dv.id_venta AND v.estatus='Pagada'
GROUP BY dv.id_producto, p.nombre
ORDER BY total_unidades DESC;

DROP VIEW IF EXISTS vw_top_clientes;
CREATE VIEW vw_top_clientes AS
SELECT
  v.cliente_id,
  CONCAT_WS(' ', c.nombre, c.apellido_paterno, c.apellido_materno) AS nombre_completo,
  SUM(v.total) AS total_gastado
FROM ventas v
LEFT JOIN clientes c ON c.id_cliente = v.cliente_id
WHERE v.estatus='Pagada'
GROUP BY v.cliente_id, nombre_completo
ORDER BY total_gastado DESC;


DROP VIEW IF EXISTS vw_stock_actual;
CREATE VIEW vw_stock_actual AS
SELECT id_producto, SUM(CASE WHEN tipo_movimiento='Entrada' THEN cantidad 
                             WHEN tipo_movimiento='Salida'  THEN -cantidad 
                             ELSE 0 END) AS stock
FROM inventario_movimientos
GROUP BY id_producto;

DROP FUNCTION IF EXISTS fn_precio_vigente;
DELIMITER $$
CREATE FUNCTION fn_precio_vigente(p_id_producto INT, p_tipo ENUM('Normal','Mayoreo','Descuento','Especial'))
RETURNS DECIMAL(10,2)
DETERMINISTIC
BEGIN
  DECLARE v DECIMAL(10,2);
  SELECT pp.precio INTO v
  FROM producto_precios pp
  WHERE pp.id_producto=p_id_producto
    AND pp.tipo_precio=p_tipo
    AND pp.activo=1
    AND (pp.vigente_hasta IS NULL OR pp.vigente_hasta>=NOW())
  ORDER BY pp.vigente_desde DESC
  LIMIT 1;
  RETURN v;
END$$
DELIMITER ;


SET FOREIGN_KEY_CHECKS = 1;

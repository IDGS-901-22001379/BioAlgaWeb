-- ======================================================
-- BASE DE DATOS: bioalga  (POS Tecnología / IoT)
-- VERSION: 2.2 (con vistas para Dashboard)
-- FECHA: 2025-09-06
-- ======================================================


DROP DATABASE IF EXISTS bioalga;
CREATE DATABASE bioalga CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
USE bioalga;

-- Usuario de BD
CREATE USER IF NOT EXISTS 'bioalga_user'@'localhost' IDENTIFIED BY 'TuPassFuerte!123';
GRANT ALL PRIVILEGES ON bioalga.* TO 'bioalga_user'@'localhost';
FLUSH PRIVILEGES;

SET FOREIGN_KEY_CHECKS = 0;

-- ==========================
-- 1) ROLES
-- ==========================
CREATE TABLE roles (
  id_rol INT AUTO_INCREMENT PRIMARY KEY,
  nombre VARCHAR(40) NOT NULL UNIQUE,
  descripcion VARCHAR(200)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ==========================
-- 2) EMPLEADOS
-- ==========================
CREATE TABLE empleados (
  id_empleado INT AUTO_INCREMENT PRIMARY KEY,
  nombre VARCHAR(100) NOT NULL,
  apellido_paterno VARCHAR(100),
  apellido_materno VARCHAR(100),
  curp VARCHAR(18),
  rfc VARCHAR(13),
  correo VARCHAR(120) UNIQUE,
  telefono VARCHAR(20),
  puesto VARCHAR(80),
  salario DECIMAL(10,2) DEFAULT 0,
  fecha_ingreso DATE,
  fecha_baja DATE,
  estatus ENUM('Activo','Inactivo','Baja') DEFAULT 'Activo',
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  INDEX idx_emp_nombre (nombre, apellido_paterno, apellido_materno)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ==========================
-- 3) USUARIOS
-- ==========================
CREATE TABLE usuarios (
  id_usuario INT AUTO_INCREMENT PRIMARY KEY,
  nombre_usuario VARCHAR(50) NOT NULL UNIQUE,
  contrasena VARCHAR(255) NOT NULL,
  id_rol INT NOT NULL,
  id_empleado INT NULL,
  ultimo_login DATETIME NULL,
  activo TINYINT(1) DEFAULT 1,
  fecha_registro DATETIME DEFAULT CURRENT_TIMESTAMP,
  INDEX idx_usuarios_id_rol (id_rol),
  INDEX idx_usuarios_id_empleado (id_empleado),
  CONSTRAINT fk_usuarios_roles FOREIGN KEY (id_rol) REFERENCES roles(id_rol),
  CONSTRAINT fk_usuarios_empleados FOREIGN KEY (id_empleado) REFERENCES empleados(id_empleado)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ==========================
-- 4) PROVEEDORES
-- ==========================
CREATE TABLE proveedores (
  id_proveedor INT AUTO_INCREMENT PRIMARY KEY,
  nombre_empresa VARCHAR(120) NOT NULL,
  contacto VARCHAR(100),
  correo VARCHAR(120),
  telefono VARCHAR(20),
  direccion TEXT,
  rfc VARCHAR(13),
  pais VARCHAR(50),
  ciudad VARCHAR(50),
  codigo_postal VARCHAR(10),
  estatus ENUM('Activo','Inactivo') DEFAULT 'Activo',
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ==========================
-- 5) CATEGORÍAS / MARCAS / UNIDADES
-- ==========================
CREATE TABLE categorias (
  id_categoria INT AUTO_INCREMENT PRIMARY KEY,
  nombre VARCHAR(100) NOT NULL,
  descripcion TEXT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE marcas (
  id_marca INT AUTO_INCREMENT PRIMARY KEY,
  nombre VARCHAR(100) NOT NULL,
  descripcion TEXT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE unidades (
  id_unidad INT AUTO_INCREMENT PRIMARY KEY,
  nombre VARCHAR(50) NOT NULL,
  simbolo VARCHAR(10)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ==========================
-- 6) PRODUCTOS
-- ==========================
CREATE TABLE productos (
  id_producto INT AUTO_INCREMENT PRIMARY KEY,
  nombre VARCHAR(150) NOT NULL,
  descripcion TEXT,
  tipo ENUM('Componente','Sensor','Actuador','Módulo','Accesorio','Cable','Alimentación','Herramienta','Microcontrolador','Biorreactor','Alga','Otro') NOT NULL DEFAULT 'Componente',
  id_categoria INT,
  id_marca INT,
  id_unidad INT,
  proveedor_preferente_id INT NULL,
  codigo_sku VARCHAR(40) NOT NULL UNIQUE,
  codigo_barras VARCHAR(50) UNIQUE,
  estatus ENUM('Activo','Inactivo') DEFAULT 'Activo',
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  CONSTRAINT fk_prod_cat   FOREIGN KEY (id_categoria) REFERENCES categorias(id_categoria),
  CONSTRAINT fk_prod_marca FOREIGN KEY (id_marca)     REFERENCES marcas(id_marca),
  CONSTRAINT fk_prod_uni   FOREIGN KEY (id_unidad)    REFERENCES unidades(id_unidad),
  CONSTRAINT fk_prod_prov  FOREIGN KEY (proveedor_preferente_id) REFERENCES proveedores(id_proveedor)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE producto_specs (
  id_spec INT AUTO_INCREMENT PRIMARY KEY,
  id_producto INT NOT NULL,
  clave VARCHAR(80) NOT NULL,
  valor VARCHAR(255) NOT NULL,
  CONSTRAINT fk_specs_prod FOREIGN KEY (id_producto) REFERENCES productos(id_producto) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ==========================
-- 7) PRECIOS (histórico)
-- ==========================
CREATE TABLE producto_precios (
  id_precio INT AUTO_INCREMENT PRIMARY KEY,
  id_producto INT NOT NULL,
  tipo_precio ENUM('Normal','Mayoreo','Descuento','Especial') NOT NULL,
  precio DECIMAL(10,2) NOT NULL,
  vigente_desde DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  vigente_hasta DATETIME NULL,
  activo TINYINT(1) NOT NULL DEFAULT 1,
  CONSTRAINT fk_precio_prod FOREIGN KEY (id_producto) REFERENCES productos(id_producto) ON DELETE CASCADE,
  INDEX idx_precio_vigencia (id_producto, tipo_precio, activo, vigente_desde)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

DROP VIEW IF EXISTS vw_producto_precio_vigente;
CREATE VIEW vw_producto_precio_vigente AS
SELECT p.id_producto, pp.tipo_precio, pp.precio
FROM productos p
JOIN producto_precios pp
  ON pp.id_producto = p.id_producto
WHERE
  pp.activo = 1
  AND (pp.vigente_hasta IS NULL OR pp.vigente_hasta >= NOW())
  AND pp.vigente_desde = (
      SELECT MAX(pp2.vigente_desde)
      FROM producto_precios pp2
      WHERE pp2.id_producto = pp.id_producto
        AND pp2.tipo_precio = pp.tipo_precio
        AND pp2.activo = 1
        AND (pp2.vigente_hasta IS NULL OR pp2.vigente_hasta >= NOW())
  );

-- ==========================
-- 8) CLIENTES
-- ==========================
CREATE TABLE clientes (
  id_cliente INT AUTO_INCREMENT PRIMARY KEY,
  nombre VARCHAR(100) NOT NULL,
  apellido_paterno VARCHAR(100),
  apellido_materno VARCHAR(100),
  correo VARCHAR(100) UNIQUE,
  telefono VARCHAR(20),
  direccion TEXT,
  tipo_cliente ENUM('Normal','Mayoreo','Especial','Descuento') DEFAULT 'Normal',
  estado ENUM('Activo','Inactivo') DEFAULT 'Activo',
  fecha_registro DATETIME DEFAULT CURRENT_TIMESTAMP,
  INDEX idx_clientes_nombre (nombre, apellido_paterno, apellido_materno)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ==========================
-- 9) COMPRAS
-- ==========================
CREATE TABLE compras (
  id_compra INT AUTO_INCREMENT PRIMARY KEY,
  proveedor_id INT NULL,
  proveedor_texto VARCHAR(200) NULL,
  fecha_compra DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  subtotal DECIMAL(12,2) NOT NULL DEFAULT 0,
  impuestos DECIMAL(12,2) NOT NULL DEFAULT 0,
  total DECIMAL(12,2)  NOT NULL DEFAULT 0,
  id_usuario INT NOT NULL,
  notas TEXT,
  CONSTRAINT fk_compra_prov FOREIGN KEY (proveedor_id) REFERENCES proveedores(id_proveedor),
  CONSTRAINT fk_compra_user FOREIGN KEY (id_usuario) REFERENCES usuarios(id_usuario)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE detalle_compra (
  id_detalle INT AUTO_INCREMENT PRIMARY KEY,
  id_compra INT NOT NULL,
  id_producto INT NOT NULL,
  cantidad INT NOT NULL,
  costo_unitario DECIMAL(10,2) NOT NULL,
  iva_unitario DECIMAL(10,2) DEFAULT 0,
  CONSTRAINT fk_dcompra_compra FOREIGN KEY (id_compra) REFERENCES compras(id_compra) ON DELETE CASCADE,
  CONSTRAINT fk_dcompra_prod FOREIGN KEY (id_producto) REFERENCES productos(id_producto)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ==========================
-- 10) INVENTARIO (movimientos)
-- ==========================
CREATE TABLE inventario_movimientos (
  id_movimiento INT AUTO_INCREMENT PRIMARY KEY,
  id_producto INT NOT NULL,
  tipo_movimiento ENUM('Entrada','Salida','Ajuste') NOT NULL,
  cantidad INT NOT NULL,
  fecha DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  origen_tipo ENUM('Compra','Venta','Pedido','Ajuste','Devolucion') NOT NULL,
  origen_id INT NULL,
  id_usuario INT NOT NULL,
  referencia VARCHAR(255),
  CONSTRAINT fk_mov_prod  FOREIGN KEY (id_producto) REFERENCES productos(id_producto),
  CONSTRAINT fk_mov_user  FOREIGN KEY (id_usuario)  REFERENCES usuarios(id_usuario),
  INDEX idx_mov_origen (origen_tipo, origen_id),
  INDEX idx_mov_prod_fecha (id_producto, fecha)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ==========================
-- 11) VENTAS
-- ==========================
CREATE TABLE ventas (
  id_venta INT AUTO_INCREMENT PRIMARY KEY,
  cliente_id INT NULL,
  fecha_venta DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  subtotal DECIMAL(12,2) NOT NULL DEFAULT 0,
  impuestos DECIMAL(12,2) NOT NULL DEFAULT 0,
  total DECIMAL(12,2) NOT NULL DEFAULT 0,
  efectivo_recibido DECIMAL(12,2) DEFAULT 0,
  cambio DECIMAL(12,2) DEFAULT 0,
  metodo_pago ENUM('Efectivo','Tarjeta','Transferencia','Mixto') NOT NULL DEFAULT 'Efectivo',
  id_usuario INT NOT NULL,
  estatus ENUM('Pagada','Cancelada') DEFAULT 'Pagada',
  CONSTRAINT fk_venta_cliente FOREIGN KEY (cliente_id) REFERENCES clientes(id_cliente),
  CONSTRAINT fk_venta_usuario FOREIGN KEY (id_usuario) REFERENCES usuarios(id_usuario),
  INDEX idx_venta_fecha (fecha_venta)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE detalle_venta (
  id_detalle INT AUTO_INCREMENT PRIMARY KEY,
  id_venta INT NOT NULL,
  id_producto INT NOT NULL,
  cantidad INT NOT NULL,
  precio_unitario DECIMAL(10,2) NOT NULL,
  descuento_unitario DECIMAL(10,2) DEFAULT 0,
  iva_unitario DECIMAL(10,2) DEFAULT 0,
  CONSTRAINT fk_dventa_venta FOREIGN KEY (id_venta) REFERENCES ventas(id_venta) ON DELETE CASCADE,
  CONSTRAINT fk_dventa_prod  FOREIGN KEY (id_producto) REFERENCES productos(id_producto)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ==========================
-- 12) PEDIDOS
-- ==========================
CREATE TABLE pedidos (
  id_pedido INT AUTO_INCREMENT PRIMARY KEY,
  cliente_id INT NOT NULL,
  fecha_pedido DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  fecha_requerida DATE NULL,
  anticipo DECIMAL(12,2) DEFAULT 0,
  subtotal DECIMAL(12,2) NOT NULL DEFAULT 0,
  impuestos DECIMAL(12,2) NOT NULL DEFAULT 0,
  total DECIMAL(12,2) NOT NULL DEFAULT 0,
  estatus ENUM('Borrador','Confirmado','Preparación','Listo','Facturado','Entregado','Cancelado') DEFAULT 'Borrador',
  id_usuario INT NOT NULL,
  notas TEXT,
  CONSTRAINT fk_pedido_cliente FOREIGN KEY (cliente_id) REFERENCES clientes(id_cliente),
  CONSTRAINT fk_pedido_usuario FOREIGN KEY (id_usuario) REFERENCES usuarios(id_usuario),
  INDEX idx_pedido_estatus (estatus)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE detalle_pedido (
  id_detalle INT AUTO_INCREMENT PRIMARY KEY,
  id_pedido INT NOT NULL,
  id_producto INT NOT NULL,
  cantidad INT NOT NULL,
  precio_unitario DECIMAL(10,2) NOT NULL,
  CONSTRAINT fk_dpedido_pedido FOREIGN KEY (id_pedido) REFERENCES pedidos(id_pedido) ON DELETE CASCADE,
  CONSTRAINT fk_dpedido_prod   FOREIGN KEY (id_producto) REFERENCES productos(id_producto)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ==========================
-- 13) DEVOLUCIONES
-- ==========================
CREATE TABLE devoluciones (
  id_devolucion INT AUTO_INCREMENT PRIMARY KEY,
  fecha_devolucion DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  id_usuario INT NOT NULL,
  usuario_nombre VARCHAR(120) NOT NULL,
  motivo VARCHAR(300) NOT NULL,
  regresa_inventario TINYINT(1) NOT NULL DEFAULT 1,
  total_devuelto DECIMAL(12,2) NOT NULL DEFAULT 0,
  referencia_venta VARCHAR(50) NULL,
  notas TEXT NULL,
  venta_id INT NULL,
  CONSTRAINT fk_devol_usuario FOREIGN KEY (id_usuario) REFERENCES usuarios(id_usuario),
  CONSTRAINT fk_devol_venta FOREIGN KEY (venta_id) REFERENCES ventas(id_venta),
  INDEX idx_devol_fecha (fecha_devolucion),
  INDEX idx_devol_usuario (id_usuario),
  INDEX idx_devol_venta (venta_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE detalle_devolucion (
  id_detalle INT AUTO_INCREMENT PRIMARY KEY,
  id_devolucion INT NOT NULL,
  id_producto INT NOT NULL,
  producto_nombre VARCHAR(150) NOT NULL,
  cantidad INT NOT NULL,
  importe_linea_total DECIMAL(12,2) NOT NULL,
  id_detalle_venta INT NULL,
  CONSTRAINT fk_dd_dev FOREIGN KEY (id_devolucion) REFERENCES devoluciones(id_devolucion) ON DELETE CASCADE,
  CONSTRAINT fk_dd_prod FOREIGN KEY (id_producto) REFERENCES productos(id_producto),
  CONSTRAINT fk_dd_detventa FOREIGN KEY (id_detalle_venta) REFERENCES detalle_venta(id_detalle),
  INDEX idx_dd_devolucion (id_devolucion),
  INDEX idx_dd_producto (id_producto),
  INDEX idx_dd_detventa (id_detalle_venta)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ------------------------------------------------------------------corte de caja ----------------------------------------------------------------------------------
/* =========================================================
   15) CORTE DE CAJA  (NUEVAS TABLAS y VISTAS)  — BioAlga
   NOTA: No se modifica ninguna tabla existente.
   ========================================================= */

-- 15.1) Cajas disponibles (si manejas más de una caja física)
CREATE TABLE IF NOT EXISTS cajas (
  id_caja INT AUTO_INCREMENT PRIMARY KEY,
  nombre VARCHAR(50) NOT NULL UNIQUE,
  descripcion VARCHAR(150) NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- 15.2) Turnos de caja (apertura/cierre por usuario)
CREATE TABLE IF NOT EXISTS caja_turnos (
  id_turno INT AUTO_INCREMENT PRIMARY KEY,
  id_caja INT NOT NULL,
  id_usuario INT NOT NULL,
  apertura DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  cierre   DATETIME NULL,
  saldo_inicial DECIMAL(12,2) NOT NULL DEFAULT 0,  -- Fondo al iniciar
  saldo_cierre  DECIMAL(12,2) NULL,                -- Conteo físico al cerrar (opcional)
  observaciones TEXT NULL,
  CONSTRAINT fk_turno_caja  FOREIGN KEY (id_caja)   REFERENCES cajas(id_caja),
  CONSTRAINT fk_turno_user  FOREIGN KEY (id_usuario) REFERENCES usuarios(id_usuario),
  INDEX idx_turno_caja_fecha (id_caja, apertura, cierre),
  INDEX idx_turno_user_fecha (id_usuario, apertura, cierre)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- 15.3) Movimientos de caja (entradas/salidas no provenientes de ventas)
CREATE TABLE IF NOT EXISTS caja_movimientos (
  id_mov INT AUTO_INCREMENT PRIMARY KEY,
  id_turno INT NOT NULL,
  fecha DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  tipo ENUM('Ingreso','Egreso') NOT NULL,
  concepto VARCHAR(150) NOT NULL,  -- Ej.: "Fondo de caja", "Retiro", "Desayuno"
  monto DECIMAL(12,2) NOT NULL,
  referencia VARCHAR(100) NULL,
  CONSTRAINT fk_mov_turno FOREIGN KEY (id_turno) REFERENCES caja_turnos(id_turno) ON DELETE CASCADE,
  INDEX idx_mov_turno_fecha (id_turno, fecha),
  INDEX idx_mov_tipo (tipo)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- 15.4) Desglose de pagos de una venta (soporta 'Mixto')
-- (No modifica ventas; sólo añade detalle por método)
CREATE TABLE IF NOT EXISTS venta_pagos (
  id_pago INT AUTO_INCREMENT PRIMARY KEY,
  id_venta INT NOT NULL,
  metodo ENUM('Efectivo','Tarjeta','Transferencia','Otro') NOT NULL,
  monto DECIMAL(12,2) NOT NULL,
  creado_en DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT fk_vp_venta FOREIGN KEY (id_venta) REFERENCES ventas(id_venta) ON DELETE CASCADE,
  INDEX idx_vp_venta (id_venta),
  INDEX idx_vp_metodo (metodo)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

/* ===========================
   VISTAS DE APOYO AL CORTE
   (filtrar por id_turno en consultas)
   =========================== */

-- 15.V1) Ventas del usuario del turno dentro de la ventana [apertura, cierre)
-- Nota: el criterio es "ventas hechas por el usuario del turno".
DROP VIEW IF EXISTS vw_corte_turno_ventas;
CREATE VIEW vw_corte_turno_ventas AS
SELECT
  ct.id_turno,
  v.id_venta,
  v.fecha_venta,
  v.total,
  v.metodo_pago,
  v.efectivo_recibido,
  v.cambio
FROM caja_turnos ct
JOIN ventas v
  ON v.id_usuario = ct.id_usuario
 AND v.estatus = 'Pagada'
 AND v.fecha_venta >= ct.apertura
 AND (ct.cierre IS NULL OR v.fecha_venta < ct.cierre);

-- 15.V2) Desglose por método usando venta_pagos (si existen)
-- Si no hay filas en venta_pagos para una venta, no suma en esta vista.
DROP VIEW IF EXISTS vw_corte_turno_pagos_por_metodo;
CREATE VIEW vw_corte_turno_pagos_por_metodo AS
SELECT
  ct.id_turno,
  vp.metodo,
  SUM(vp.monto) AS monto
FROM caja_turnos ct
JOIN ventas v
  ON v.id_usuario = ct.id_usuario
 AND v.estatus   = 'Pagada'
 AND v.fecha_venta >= ct.apertura
 AND (ct.cierre IS NULL OR v.fecha_venta < ct.cierre)
JOIN venta_pagos vp ON vp.id_venta = v.id_venta
GROUP BY ct.id_turno, vp.metodo;

-- 15.V3) Devoluciones en la ventana del turno (se asumen en efectivo para arqueo)
DROP VIEW IF EXISTS vw_corte_turno_devoluciones;
CREATE VIEW vw_corte_turno_devoluciones AS
SELECT
  ct.id_turno,
  COALESCE(SUM(d.total_devuelto),0) AS total_devoluciones,
  COUNT(d.id_devolucion)            AS num_devoluciones
FROM caja_turnos ct
LEFT JOIN devoluciones d
  ON d.id_usuario = ct.id_usuario
 AND d.fecha_devolucion >= ct.apertura
 AND (ct.cierre IS NULL OR d.fecha_devolucion < ct.cierre)
GROUP BY ct.id_turno;

-- 15.V4) Entradas/Salidas manuales capturadas en caja_movimientos
DROP VIEW IF EXISTS vw_corte_turno_movimientos;
CREATE VIEW vw_corte_turno_movimientos AS
SELECT
  ct.id_turno,
  COALESCE(SUM(CASE WHEN cm.tipo='Ingreso' THEN cm.monto END),0) AS total_entradas,
  COALESCE(SUM(CASE WHEN cm.tipo='Egreso'  THEN cm.monto END),0) AS total_salidas
FROM caja_turnos ct
LEFT JOIN caja_movimientos cm ON cm.id_turno = ct.id_turno
GROUP BY ct.id_turno;

-- 15.V5) Resumen para el corte (EFECTIVO esperado)
-- Efectivo de ventas: por defecto se toma (efectivo_recibido - cambio).
-- Si utilizas venta_pagos, puedes reemplazar por la vista 15.V2 filtrando metodo='Efectivo'.
DROP VIEW IF EXISTS vw_corte_turno_resumen;
CREATE VIEW vw_corte_turno_resumen AS
WITH ventas_cash AS (
  SELECT id_turno, COALESCE(SUM(efectivo_recibido - cambio),0) AS efectivo_neto
  FROM vw_corte_turno_ventas
  GROUP BY id_turno
),
ventas_tot AS (
  SELECT id_turno, COALESCE(SUM(total),0) AS ventas_totales, COUNT(*) AS num_tickets
  FROM vw_corte_turno_ventas
  GROUP BY id_turno
),
pagos_metodos AS (
  SELECT id_turno,
         COALESCE(SUM(CASE WHEN metodo='Efectivo'     THEN monto END),0) AS m_efectivo,
         COALESCE(SUM(CASE WHEN metodo='Tarjeta'      THEN monto END),0) AS m_tarjeta,
         COALESCE(SUM(CASE WHEN metodo='Transferencia'THEN monto END),0) AS m_transferencia,
         COALESCE(SUM(CASE WHEN metodo='Otro'         THEN monto END),0) AS m_otro
  FROM vw_corte_turno_pagos_por_metodo
  GROUP BY id_turno
)
SELECT
  ct.id_turno,
  ct.id_caja,
  ct.id_usuario,
  ct.apertura,
  ct.cierre,
  ct.saldo_inicial,
  vt.ventas_totales,
  vt.num_tickets,
  -- Ingresos netos en efectivo por ventas (sin usar venta_pagos)
  vc.efectivo_neto AS ventas_efectivo_neto,
  -- Desglose opcional por método si usas venta_pagos
  pm.m_efectivo, pm.m_tarjeta, pm.m_transferencia, pm.m_otro,
  mv.total_entradas,
  mv.total_salidas,
  dv.total_devoluciones,
  -- Dinero en caja esperado (arqueo)
  (ct.saldo_inicial + vc.efectivo_neto + mv.total_entradas - mv.total_salidas - dv.total_devoluciones)
    AS efectivo_esperado
FROM caja_turnos ct
LEFT JOIN ventas_cash   vc ON vc.id_turno = ct.id_turno
LEFT JOIN ventas_tot    vt ON vt.id_turno = ct.id_turno
LEFT JOIN pagos_metodos pm ON pm.id_turno = ct.id_turno
LEFT JOIN vw_corte_turno_movimientos mv ON mv.id_turno = ct.id_turno
LEFT JOIN vw_corte_turno_devoluciones dv ON dv.id_turno = ct.id_turno;
-- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- ==========================
-- 14) VISTAS PARA REPORTEO Y DASHBOARD
-- ==========================

-- Devoluciones por día
DROP VIEW IF EXISTS vw_devoluciones_por_dia;
CREATE VIEW vw_devoluciones_por_dia AS
SELECT DATE(d.fecha_devolucion) AS dia, SUM(d.total_devuelto) AS total_devoluciones
FROM devoluciones d
GROUP BY DATE(d.fecha_devolucion);

-- Ventas por día
DROP VIEW IF EXISTS vw_ventas_por_dia;
CREATE VIEW vw_ventas_por_dia AS
SELECT DATE(fecha_venta) AS dia, SUM(total) AS total
FROM ventas
WHERE estatus='Pagada'
GROUP BY DATE(fecha_venta);

-- Ventas netas por día = Ventas - Devoluciones
DROP VIEW IF EXISTS vw_ventas_netas_por_dia;
CREATE VIEW vw_ventas_netas_por_dia AS
SELECT
  v.dia,
  v.total AS total_ventas_brutas,
  COALESCE(d.total_devoluciones, 0) AS total_devoluciones,
  v.total - COALESCE(d.total_devoluciones, 0) AS total_ventas_netas
FROM vw_ventas_por_dia v
LEFT JOIN vw_devoluciones_por_dia d
  ON d.dia = v.dia;

-- Top productos (unidades)
DROP VIEW IF EXISTS vw_top_productos;
CREATE VIEW vw_top_productos AS
SELECT dv.id_producto, p.nombre, SUM(dv.cantidad) AS total_unidades
FROM detalle_venta dv
JOIN productos p ON p.id_producto = dv.id_producto
JOIN ventas v  ON v.id_venta = dv.id_venta AND v.estatus='Pagada'
GROUP BY dv.id_producto, p.nombre
ORDER BY total_unidades DESC;

-- Top productos (ingreso)
CREATE OR REPLACE VIEW vw_top_productos_ingreso AS
SELECT dv.id_producto, p.nombre,
       SUM(dv.cantidad) AS total_unidades,
       SUM((dv.precio_unitario - dv.descuento_unitario + dv.iva_unitario) * dv.cantidad) AS ingreso_total
FROM detalle_venta dv
JOIN productos p ON p.id_producto = dv.id_producto
JOIN ventas v  ON v.id_venta = dv.id_venta AND v.estatus='Pagada'
GROUP BY dv.id_producto, p.nombre
ORDER BY ingreso_total DESC;

-- Top clientes
DROP VIEW IF EXISTS vw_top_clientes;
CREATE VIEW vw_top_clientes AS
SELECT
  v.cliente_id,
  CONCAT_WS(' ', c.nombre, c.apellido_paterno, c.apellido_materno) AS nombre_completo,
  SUM(v.total) AS total_gastado
FROM ventas v
LEFT JOIN clientes c ON c.id_cliente = v.cliente_id
WHERE v.estatus='Pagada'
GROUP BY v.cliente_id, nombre_completo
ORDER BY total_gastado DESC;

-- Ventas por usuario
CREATE OR REPLACE VIEW vw_ventas_por_usuario AS
SELECT u.id_usuario, e.nombre, e.apellido_paterno,
       SUM(v.total) AS total_vendido, COUNT(v.id_venta) AS num_ventas
FROM ventas v
JOIN usuarios u ON u.id_usuario = v.id_usuario
LEFT JOIN empleados e ON e.id_empleado = u.id_empleado
WHERE v.estatus='Pagada'
GROUP BY u.id_usuario, e.nombre, e.apellido_paterno
ORDER BY total_vendido DESC;

-- Devoluciones por usuario
CREATE OR REPLACE VIEW vw_devoluciones_por_usuario AS
SELECT d.id_usuario, u.nombre_usuario,
       COUNT(d.id_devolucion) AS num_devoluciones,
       SUM(d.total_devuelto) AS total_devuelto
FROM devoluciones d
JOIN usuarios u ON u.id_usuario = d.id_usuario
GROUP BY d.id_usuario, u.nombre_usuario;

-- Compras por proveedor
CREATE OR REPLACE VIEW vw_compras_por_proveedor AS
SELECT p.id_proveedor, p.nombre_empresa,
       SUM(c.total) AS total_comprado, COUNT(c.id_compra) AS num_compras
FROM compras c
LEFT JOIN proveedores p ON p.id_proveedor = c.proveedor_id
GROUP BY p.id_proveedor, p.nombre_empresa
ORDER BY total_comprado DESC;

-- Stock actual
DROP VIEW IF EXISTS vw_stock_actual;
CREATE VIEW vw_stock_actual AS
SELECT id_producto, SUM(CASE WHEN tipo_movimiento='Entrada' THEN cantidad 
                             WHEN tipo_movimiento='Salida'  THEN -cantidad 
                             ELSE 0 END) AS stock
FROM inventario_movimientos
GROUP BY id_producto;

-- Función precio vigente
DROP FUNCTION IF EXISTS fn_precio_vigente;
DELIMITER $$
CREATE FUNCTION fn_precio_vigente(p_id_producto INT, p_tipo ENUM('Normal','Mayoreo','Descuento','Especial'))
RETURNS DECIMAL(10,2)
DETERMINISTIC
BEGIN
  DECLARE v DECIMAL(10,2);
  SELECT pp.precio INTO v
  FROM producto_precios pp
  WHERE pp.id_producto=p_id_producto
    AND pp.tipo_precio=p_tipo
    AND pp.activo=1
    AND (pp.vigente_hasta IS NULL OR pp.vigente_hasta>=NOW())
  ORDER BY pp.vigente_desde DESC
  LIMIT 1;
  RETURN v;
END$$
DELIMITER ;

DROP VIEW IF EXISTS vw_ventas_resumen;
CREATE VIEW vw_ventas_resumen AS
SELECT 
    DATE(v.fecha_venta) AS dia,
    YEAR(v.fecha_venta) AS anio,
    MONTH(v.fecha_venta) AS mes,
    WEEK(v.fecha_venta, 1) AS semana,
    SUM(v.total) AS total_ventas,
    SUM(v.subtotal) AS subtotal,
    SUM(v.impuestos) AS impuestos,
    COUNT(v.id_venta) AS num_tickets
FROM ventas v
WHERE v.estatus = 'Pagada'
GROUP BY DATE(v.fecha_venta), YEAR(v.fecha_venta), MONTH(v.fecha_venta), WEEK(v.fecha_venta, 1);





-- ---- nuevas viasta 


CREATE OR REPLACE VIEW vw_top_clientes AS
SELECT
  COALESCE(v.cliente_id, 0) AS cliente_id,
  COALESCE(CONCAT_WS(' ', c.nombre, c.apellido_paterno, c.apellido_materno), '(Sin cliente)') AS nombre_completo,
  COALESCE(SUM(v.total), 0) AS total_gastado
FROM ventas v
LEFT JOIN clientes c ON c.id_cliente = v.cliente_id
WHERE v.estatus='Pagada'
GROUP BY COALESCE(v.cliente_id, 0), COALESCE(CONCAT_WS(' ', c.nombre, c.apellido_paterno, c.apellido_materno), '(Sin cliente)')
ORDER BY total_gastado DESC;


CREATE OR REPLACE VIEW vw_compras_por_proveedor AS
SELECT
  COALESCE(p.id_proveedor, 0) AS id_proveedor,
  COALESCE(p.nombre_empresa, '(Sin proveedor)') AS nombre_empresa,
  COALESCE(SUM(c.total), 0) AS total_comprado,
  COUNT(c.id_compra) AS num_compras
FROM compras c
LEFT JOIN proveedores p ON p.id_proveedor = c.proveedor_id
GROUP BY COALESCE(p.id_proveedor, 0), COALESCE(p.nombre_empresa, '(Sin proveedor)')
ORDER BY total_comprado DESC;


CREATE OR REPLACE VIEW vw_ventas_resumen AS
SELECT 
    DATE(v.fecha_venta)           AS dia,
    YEAR(v.fecha_venta)           AS anio,
    MONTH(v.fecha_venta)          AS mes,
    WEEK(v.fecha_venta, 1)        AS semana,
    COALESCE(SUM(v.total), 0)     AS total_ventas,
    COALESCE(SUM(v.subtotal), 0)  AS subtotal,
    COALESCE(SUM(v.impuestos), 0) AS impuestos,
    COUNT(v.id_venta)             AS num_tickets
FROM ventas v
WHERE v.estatus = 'Pagada'
GROUP BY DATE(v.fecha_venta), YEAR(v.fecha_venta), MONTH(v.fecha_venta), WEEK(v.fecha_venta, 1);





SET FOREIGN_KEY_CHECKS = 1;
